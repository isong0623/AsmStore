import com.app.plugin.AspectjPlugin
import com.app.plugin.JavassistPlugin

def isBuildApplication = !rootProject.projectDir.getAbsolutePath().contains("AsmStore")
def versionFile = file(String.format("%s/config.properties",
        isBuildApplication?rootProject.projectDir.getParentFile().getAbsolutePath():
                rootProject.projectDir.getAbsolutePath()))
if (versionFile.canRead()) {
    Properties versionProps = new Properties()
    FileInputStream fis = new FileInputStream(versionFile)
    versionProps.load(fis)
    isBuildApplication =  "false".equalsIgnoreCase(versionProps['isBuildApplication'])
    fis.close()
} else {
    throw new FileNotFoundException("Could not read config.properties!")
}

if(isBuildApplication){
    apply plugin: 'com.android.application'
    apply plugin: AspectjPlugin
    apply plugin: JavassistPlugin
}
else{
    apply plugin: 'com.android.library'
}
apply plugin: 'realm-android'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'kotlin-kapt'

android {
    compileSdkVersion rootProject.ext.android.compileSdkVersion
    buildToolsVersion rootProject.ext.android.buildToolsVersion

    defaultConfig {
        if(isBuildApplication){
            applicationId "com.haoda.live"
        }

        multiDexEnabled true
        minSdkVersion rootProject.ext.android.minSdkVersion
        targetSdkVersion rootProject.ext.android.targetSdkVersion
        versionCode rootProject.ext.android.versionCode
        versionName rootProject.ext.android.versionName
        renderscriptTargetApi rootProject.ext.android.renderscriptTargetApi
        renderscriptSupportModeEnabled rootProject.ext.android.renderscriptSupportModeEnabled
        vectorDrawables.useSupportLibrary = rootProject.ext.android.vectorDrawables_useSupportLibrary
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }

    signingConfigs {
        key {
            try {
                storeFile file("../../release/haoda.jks")
                storePassword "TODO"
                keyAlias "TODO"
                keyPassword "TODO"
                v2SigningEnabled true
            } catch (ex) {
                throw new InvalidUserDataException(ex.toString())
            }
        }
    }

    buildTypes {
        release {
            minifyEnabled false
            signingConfig signingConfigs.key
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
        debug {
            minifyEnabled false
            signingConfig signingConfigs.key
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
    compileOptions {
        sourceCompatibility 1.8
        targetCompatibility 1.8
    }
    lintOptions {
        abortOnError false
    }
    dexOptions {
        preDexLibraries = false
    }
    dataBinding {
        enabled = false
    }

    compileOptions {
        targetCompatibility JavaVersion.VERSION_1_8
        sourceCompatibility JavaVersion.VERSION_1_8
    }

    if(isBuildApplication){
        kotlinOptions {
            jvmTarget = JavaVersion.VERSION_1_8
        }
    }

    dexOptions {
        //使用增量模式构建
        incremental true
        //最大堆内存
        javaMaxHeapSize "8g"
        //是否支持大工程模式
        jumboMode = true
        //预编译
        preDexLibraries = true
        //线程数
        threadCount = 12
    }

    lintOptions {
        checkReleaseBuilds false
        // Or, if you prefer, you can continue to check for errors in release builds,
        // but continue the build even when errors are found:
        abortOnError false
    }

    sourceSets {
        main {
            jniLibs.srcDirs = ['libs']
            res.srcDirs = [
                    'src/main/res'
            ]

            if (isBuildApplication) {
                manifest.srcFile 'src/main/manifest/application/AndroidManifest.xml'
            } else {
                manifest.srcFile 'src/main/manifest/module/AndroidManifest.xml'
            }
        }
    }
}

dependencies {
    implementation fileTree(dir: "libs", include: ["*.jar"])

    api  project(':HDCommon:app')
    api  project(':HDCommon:libAnnotations')
    api  project(':HDCommon:libKAPT')
    kapt project(':HDCommon:libKAPT')
}