import com.app.plugin.AspectjPlugin
import com.app.plugin.JavassistPlugin

def isBuildApplication = rootProject.projectDir.getAbsolutePath().contains("AsmStore")
def versionFile = file(String.format("%s/config.properties",
        isBuildApplication?rootProject.projectDir.getAbsolutePath():
                rootProject.projectDir.getParentFile().getAbsolutePath()))
if (versionFile.canRead()) {
    Properties versionProps = new Properties()
    FileInputStream fis = new FileInputStream(versionFile)
    versionProps.load(fis)
    isBuildApplication =  "true".equalsIgnoreCase(versionProps['isBuildApplication'])
    fis.close()
} else {
    throw new FileNotFoundException("Could not read config.properties!")
}

if(isBuildApplication){
    apply plugin: 'com.android.application'
    apply plugin: AspectjPlugin
    apply plugin: JavassistPlugin
}
else{
    apply plugin: 'com.android.library'
}

apply plugin: 'realm-android'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'kotlin-kapt'

android {
    compileSdkVersion rootProject.ext.android.compileSdkVersion
    buildToolsVersion rootProject.ext.android.buildToolsVersion

    defaultConfig {
        multiDexEnabled true
        if(isBuildApplication){
            applicationId rootProject.ext.android.applicationId
        }
        minSdkVersion rootProject.ext.android.minSdkVersion
        targetSdkVersion rootProject.ext.android.targetSdkVersion
        versionCode rootProject.ext.android.versionCode
        versionName rootProject.ext.android.versionName
        renderscriptTargetApi rootProject.ext.android.renderscriptTargetApi
        renderscriptSupportModeEnabled rootProject.ext.android.renderscriptSupportModeEnabled
        vectorDrawables.useSupportLibrary = rootProject.ext.android.vectorDrawables_useSupportLibrary
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"

        if(isBuildApplication){
            applicationVariants.all { variant ->
                rootProject.ext.android.buildType = variant.buildType.name
                variant.outputs.all { output ->
                    def outputFile = output.outputFile
                    if (outputFile != null && outputFile.name.endsWith('.apk')) {
                        outputFileName = String.format(rootProject.ext.android.buildApkNameFormat,variant.buildType.name)
                    }
                }
            }
        }
//        javaCompileOptions { annotationProcessorOptions { includeCompileClasspath = true } }
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }

    compileOptions {
        targetCompatibility JavaVersion.VERSION_1_8
        sourceCompatibility JavaVersion.VERSION_1_8
    }

    kotlinOptions {
        jvmTarget = JavaVersion.VERSION_1_8
    }

    dexOptions {
        //使用增量模式构建
        incremental true
        //最大堆内存
        javaMaxHeapSize "8g"
        //是否支持大工程模式
        jumboMode = true
        //预编译
        preDexLibraries = true
        //线程数
        threadCount = 12
    }

    lintOptions {
        checkReleaseBuilds false
        // Or, if you prefer, you can continue to check for errors in release builds,
        // but continue the build even when errors are found:
        abortOnError false
    }

    sourceSets {
        main {
            jniLibs.srcDirs = ['libs']
            res.srcDirs = [
                'src/main/res'
            ]
        }
    }
}

kapt {
    useBuildCache = true
}

dependencies {
    testImplementation rootProject.ext.dependencies.junit
    androidTestImplementation rootProject.ext.dependencies.junitext
    androidTestImplementation rootProject.ext.dependencies.espresso

    if(isBuildApplication){
        api fileTree(dir: "libs", include: ["*.jar","*.aar"])
        api project(':HDCommon:app')
        api project(':HDCommon:libAnnotations')
        api project(':HDCommon:libKAPT')
        kapt project(':HDCommon:libKAPT')
    }

}

